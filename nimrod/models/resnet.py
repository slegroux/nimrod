"""Neural net model"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/models.resnet.ipynb.

# %% auto 0
__all__ = ['logger', 'ResBlock', 'ResNet', 'ResNetX']

# %% ../../nbs/models.resnet.ipynb 3
import torch.nn as nn

import torch
from torchinfo import summary
from torchvision.transforms import transforms


from omegaconf import OmegaConf
from hydra.utils import instantiate

from matplotlib import pyplot as plt
import math

from .conv import ConvLayer
from .core import Classifier
from ..utils import get_device, set_seed
from ..image.datasets import ImageDataModule

from typing import List, Optional, Callable, Any
import logging
from functools import partial


# %% ../../nbs/models.resnet.ipynb 4
logger = logging.getLogger(__name__)
set_seed()

# %% ../../nbs/models.resnet.ipynb 6
class ResBlock(nn.Module):
    def __init__(
            self,
            n_channels: int=3 # Number of input & output channels
        ):

        super().__init__()

        layers = []
        conv = partial(ConvLayer, n_channels, n_channels, stride=1, normalization=nn.BatchNorm2d)
        layers += [conv(activation=nn.ReLU), conv(activation=None)]
        self.layers = nn.Sequential(*layers)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        return x + self.layers(x)

# %% ../../nbs/models.resnet.ipynb 10
class ResNet(nn.Module):
    def __init__(
            self,
            n_features: List[int]=[1, 8, 16, 32, 16], # Number of input & output channels
            num_classes: int=10, # Number of classes
        ):

        super().__init__()
        logger.info("ResNet: init")
        layers = []
        conv = partial(ConvLayer, stride=2, normalization=nn.BatchNorm2d, activation=nn.ReLU)
        # convnet with resblock between
        for i in range(len(n_features)-1):
            layers += [conv(n_features[i], n_features[i+1])]
            layers += [ResBlock(n_features[i+1])]

        # last layer back to n_classes and flatten
        layers.append(conv(n_features[-1], num_classes))
        layers.append(nn.Flatten())
        self.layers = nn.Sequential(*layers)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        return self.layers(x)

# %% ../../nbs/models.resnet.ipynb 13
class ResNetX(Classifier):
    def __init__(
        self,
        nnet:ResNet,
        num_classes:int,
        optimizer:Callable[...,torch.optim.Optimizer], # optimizer,
        scheduler: Optional[Callable[...,Any]]=None, # scheduler
        ):
        
        logger.info("ResNetX: init")
        super().__init__(
            nnet=nnet,
            num_classes=num_classes,
            optimizer=optimizer,
            scheduler=scheduler
            )

    def _step(self, batch, batch_idx):
        x, y = batch
        y_hat = self.forward(x)
        loss = self.loss(y_hat, y)
        preds = y_hat.argmax(dim=1)
        return loss, preds, y
    
    def predict_step(self, batch, batch_idx, dataloader_idx=0):
        x, y = batch
        y_hat = self.forward(x)
        return y_hat.argmax(dim=1)
