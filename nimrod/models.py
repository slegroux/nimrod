# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_models.ipynb.

# %% auto 0
__all__ = ['AutoEncoder', 'AutoEncoderPL']

# %% ../nbs/02_models.ipynb 3
import torch.nn.functional as F
import torch.nn as nn
import torch
from .modules import Encoder, Decoder
import pytorch_lightning as pl

# %% ../nbs/02_models.ipynb 4
class AutoEncoder(nn.Module):
    def __init__(self,
        encoder:Encoder, # Encoder layer
        decoder:Decoder # Decoder layer
        ):
        super().__init__()
        self.encoder = encoder
        self.decoder = decoder
    
    def forward(self,
        x:torch.Tensor # Tensor B x L
        )->torch.Tensor:
        z = self.encoder(x)
        x_hat = self.decoder(z)
        return x_hat

# %% ../nbs/02_models.ipynb 7
class AutoEncoderPL(pl.LightningModule):
    def __init__(self, autoencoder:AutoEncoder):
        super().__init__()
        self.save_hyperparameters(ignore=['autoencoder'])
        self.autoencoder = autoencoder

    def forward(self, x):
        return self.autoencoder(x)

    def training_step(self, batch, batch_idx):
        # training_step defines the train loop.
        x, y = batch
        x = x.view(x.size(0), -1) # flatten B x C x H x W to B x L (grey pic)
        x_hat = self.autoencoder(x)
        loss = F.mse_loss(x_hat, x)
        self.log("train_loss", loss)
        return loss
    
    def testing_step(self, batch, batch_idx):
        # training_step defines the train loop.
        x, y = batch
        x = x.view(x.size(0), -1) # flatten B x C x H x W to B x L (grey pic)
        x_hat = self.autoencoder(x)
        loss = F.mse_loss(x_hat, x)
        self.log("test_loss", loss, on_step=True, on_epoch=True, sync_dist=True)
        return loss
    
    def validation_step(self, batch, batch_idx):
        # training_step defines the train loop.
        x, y = batch
        x = x.view(x.size(0), -1) # flatten B x C x H x W to B x L (grey pic)
        x_hat = self.autoencoder(x)
        loss = F.mse_loss(x_hat, x)
        self.log("val_loss", loss, on_step=True, on_epoch=True, sync_dist=True)
        return loss

    def configure_optimizers(self):
        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)
        return optimizer

