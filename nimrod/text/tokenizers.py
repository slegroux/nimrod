# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/text.tokenizers.ipynb.

# %% auto 0
__all__ = ['Phonemizer', 'Tokenizer', 'Numericalizer', 'TextCollater']

# %% ../../nbs/text.tokenizers.ipynb 4
from phonemizer.backend import EspeakBackend
from phonemizer.backend.espeak.language_switch import LanguageSwitch
from phonemizer.backend.espeak.words_mismatch import WordMismatch
from phonemizer.punctuation import Punctuation
from phonemizer.separator import Separator
from phonemizer import phonemize
from torch.utils.data import DataLoader
from multipledispatch import dispatch

# %% ../../nbs/text.tokenizers.ipynb 6
class Phonemizer():
    def __init__(self,
        separator=Separator(word=" ", syllable="|", phone=None), # separator
        language='en-us', # language
        backend='espeak', # phonemization backend (espeak)
        strip=True, # strip
        preserve_punctuation=True # preserve punctuation
        ):
        self.separator = separator
        self.language = language
        self.backend = backend
        self.strip = strip
        self.preserve_punctuation = preserve_punctuation
    
    def __call__(self, text, n_jobs=1):
        return(
            phonemize(
                text,
                language=self.language,
                backend=self.backend,
                separator=self.separator,
                strip=self.strip,
                preserve_punctuation=self.preserve_punctuation,
                njobs=n_jobs
                )
        )

# %% ../../nbs/text.tokenizers.ipynb 12
import torch
from collections import Counter
from torchtext.data.utils import get_tokenizer
from torchtext.vocab import build_vocab_from_iterator
from collections import Counter
from torchtext.datasets import AG_NEWS
from typing import Iterable, List
from torch.nn.utils.rnn import pad_sequence
from typing import List

# %% ../../nbs/text.tokenizers.ipynb 13
class Tokenizer:
    def __init__(self, backend='spacy', language='en'):
        if language == 'en':
            language = 'en_core_web_sm'
        self.tokenizer = get_tokenizer(backend, language=language)

    def __call__(self, text:str):
        return self.tokenizer(text)
    
    def tokenize_iter(self, data_iter:Iterable):
        for _, text in data_iter:
            yield self.tokenizer(text)

    def inverse(self, tokens:List[int]):
        # TODO: take care of white spaces
        return ' '.join(tokens)

# %% ../../nbs/text.tokenizers.ipynb 17
# TODO: add more special characters
class Numericalizer():
    def __init__(self, tokenizer:Tokenizer, data_iter:Iterable, specials=["<unk>"]):
        self._tokenizer = tokenizer
        self._vocab = self.build_map_from_iter(data_iter, specials=specials)
    
    def build_map_from_iter(self,data_iter:Iterable, specials = ["<unk>"]):
        self._vocab = build_vocab_from_iterator(self._tokenizer.tokenize_iter(data_iter), specials=specials)
        if "<unk>" in specials:
            self._vocab.set_default_index(self._vocab["<unk>"])
        return self._vocab

    @dispatch(list, type=torch.LongTensor)
    def __call__(self, texts:List[str], type=torch.LongTensor)->List[List[int]]:
        return [type(self._vocab(self._tokenizer(text))) for text in texts]
        
    @dispatch(str)
    def __call__(self, text:str)->List[int]:
        return self._vocab(self._tokenizer(text))
    
    @property
    def vocab(self):
        return(self._vocab)
    
    def inverse(self, indices:List[int]):
        return self._tokenizer.inverse([self._vocab.get_itos()[i] for i in indices])
    

# %% ../../nbs/text.tokenizers.ipynb 21
class TextCollater:
    def __init__(self,
                 numericalizer,
                 padding_value:int= -1
                 ):
        self._numericalizer = numericalizer
        self.padding_value = padding_value

    def collate_fn(self, batch):
        texts = [row[1] for row in batch]
        tokens = self._numericalizer(texts)
        text_lens = torch.LongTensor([token.shape[0] for token in tokens])
        text_pad = pad_sequence(tokens, batch_first=True, padding_value=self.padding_value)
        return text_pad, text_lens
