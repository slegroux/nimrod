# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_data.datasets.ipynb.

# %% auto 0
__all__ = ['ImageDataset', 'MNISTDataset']

# %% ../../nbs/00_data.datasets.ipynb 3
import pandas as pd
import torchvision
from torch.utils.data import Dataset, DataLoader
import torch
from matplotlib import pyplot as plt

# %% ../../nbs/00_data.datasets.ipynb 4
class ImageDataset(Dataset):
    " Base class for image datasets providing visualization of (image, label) samples"

    def show(self,
        index:int # Index of the (image,label) sample to visualize
        ):
        X, y = self.__getitem__(index)
        plt.figure(figsize = (1, 1))
        plt.imshow(X.numpy().reshape(28,28),cmap='gray')
        plt.title(f"Label: {int(y)}")
        plt.show()

# %% ../../nbs/00_data.datasets.ipynb 5
class MNISTDataset(ImageDataset):
    "MNIST digit dataset"

    def __init__(self,
        data_root:str='~/Data',
        train=True,
        transform=torchvision.transforms.ToTensor()
        ):
        """ Download and format MNIST dataset

        Parameters
        ----------
        data_root : str, optional
            _description_, by default '~/Data'
        train: bool, optional
            Training (True) or Validation set(False)
        transform : _type_, optional
            _description_, by default torchvision.transforms.ToTensor()
        """        
        super().__init__()
        self.ds = torchvision.datasets.MNIST(
            data_root,
            train = train,
            transform=transform, 
            download=True
        )
    def __len__(self):
        return len(self.ds)
    
    def __getitem__(self, idx):
        x = self.ds[idx][0].squeeze(0).flatten()
        return x, self.ds.targets[idx]
