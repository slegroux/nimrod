# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/data.datasets.ipynb.

# %% auto 0
__all__ = ['ImageDataset', 'MNISTDataset']

# %% ../../nbs/data.datasets.ipynb 3
import pandas as pd
import torchvision
from torch.utils.data import Dataset, DataLoader
import torch
from matplotlib import pyplot as plt
import torch.utils.data as data

# %% ../../nbs/data.datasets.ipynb 4
class ImageDataset(Dataset):
    " Base class for image datasets providing visualization of (image, label) samples"

    def show(self,
        index:int # Index of the (image,label) sample to visualize
        ):
        X, y = self.__getitem__(index)
        plt.figure(figsize = (1, 1))
        plt.imshow(X.numpy().reshape(28,28),cmap='gray')
        plt.title(f"Label: {int(y)}")
        plt.show()

    def show_img_batch(self, batch, n=5):
        x, y = batch
        images = [img for img in x[:n]]
        plt.imshow(images.numpy().reshape(28,28),cmap='gray')
    
            

# %% ../../nbs/data.datasets.ipynb 5
class MNISTDataset(ImageDataset):
    "MNIST digit dataset"

    def __init__(
        self,
        data_root:str='~/Data', # path where data is saved
        train = True, # train or test dataset
        transform:torchvision.transforms.transforms=torchvision.transforms.ToTensor() # data formatting
    ):

        super().__init__()

        self.ds = torchvision.datasets.MNIST(
            data_root,
            train = train,
            transform=transform, 
            download=True
        )

    def __len__(self):
        return len(self.ds)
    
    def __getitem__(self, idx):
        x = self.ds[idx][0]
        y = self.ds[idx][1]
        return x, y
    
    def train_dev_split(self,
        ratio:float, # percentage of train/dev split,
        seed:int=42 # rand generator seed
    ):
        train_set_size = int(len(self.ds) * ratio)
        valid_set_size = len(self.ds) - train_set_size

        # split the train set into two
        seed = torch.Generator().manual_seed(seed)
        train_set, valid_set = data.random_split(self.ds, [train_set_size, valid_set_size], generator=seed)
        return train_set, valid_set


