# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/tts.models.tacotron2.ipynb.

# %% auto 0
__all__ = ['ConvNorm', 'LinearNorm', 'LocationLayer', 'LocationSensitiveAttention', 'Encoder', 'Prenet', 'get_mask_from_lengths',
           'Decoder', 'Postnet', 'Tacotron2']

# %% ../../../nbs/tts.models.tacotron2.ipynb 3
import torch
import torch.nn as nn
from torch.nn import functional as F
from torch.nn import BatchNorm1d, LSTM, Conv1d

from math import sqrt

from matplotlib import pyplot as plt

from omegaconf import OmegaConf
from hydra.utils import instantiate


# %% ../../../nbs/tts.models.tacotron2.ipynb 5
class ConvNorm(nn.Module):
    def __init__(self, in_channels:int, out_channels:int, kernel_size:int=1, stride:int=1,
                 padding:bool=None, dilation:int=1, bias:bool=True, w_init_gain:str='linear'):
        """Convolution 1D + Xavier initialization

        Args:
            in_channels (int): _description_
            out_channels (int): _description_
            kernel_size (int, optional): _description_. Defaults to 1.
            stride (int, optional): _description_. Defaults to 1.
            padding (bool, optional): _description_. Defaults to None.
            dilation (int, optional): _description_. Defaults to 1.
            bias (bool, optional): _description_. Defaults to True.
            w_init_gain (str, optional): _description_. Defaults to 'linear'.
        """
        super().__init__()
        if padding is None:
            assert(kernel_size % 2 == 1)
            padding = int(dilation * (kernel_size - 1) / 2)

        self.conv = Conv1d(
            in_channels, out_channels,
            kernel_size=kernel_size, stride=stride,
            padding=padding, dilation=dilation,
            bias=bias
        )

        nn.init.xavier_uniform_(self.conv.weight, gain=nn.init.calculate_gain(w_init_gain))

    def forward(self, signal):
        conv_signal = self.conv(signal)
        return conv_signal

# %% ../../../nbs/tts.models.tacotron2.ipynb 8
class LinearNorm(nn.Module):
    def __init__(self, in_dim:int, out_dim:int, bias:bool=True, w_init_gain:str='linear'):
        """_summary_

        Args:
            in_dim (int): _description_
            out_dim (int): _description_
            bias (bool, optional): _description_. Defaults to True.
            w_init_gain (str, optional): _description_. Defaults to 'linear'.
        """

        super().__init__()
        self.linear_layer = torch.nn.Linear(in_dim, out_dim, bias=bias)
        # TODO: normal vs. uniform init?
        torch.nn.init.xavier_uniform_(
            self.linear_layer.weight,
            gain=torch.nn.init.calculate_gain(w_init_gain))

    def forward(self, x):
        return self.linear_layer(x)

# %% ../../../nbs/tts.models.tacotron2.ipynb 11
class LocationLayer(nn.Module):
    def __init__(self, attention_n_filters:int, attention_kernel_size:int,
                 attention_dim:int):
        """Location Layer

        Args:
            attention_n_filters (int): _description_
            attention_kernel_size (int): _description_
            attention_dim (int): _description_
        """
        super(LocationLayer, self).__init__()
        padding = int((attention_kernel_size - 1) / 2)
        self.location_conv = ConvNorm(2, attention_n_filters,
                                      kernel_size=attention_kernel_size,
                                      padding=padding, bias=False, stride=1,
                                      dilation=1)
        self.location_dense = LinearNorm(attention_n_filters, attention_dim,
                                         bias=False, w_init_gain='tanh')

    def forward(self, attention_weights_cat):
        processed_attention = self.location_conv(attention_weights_cat)
        processed_attention = processed_attention.transpose(1, 2)
        processed_attention = self.location_dense(processed_attention)
        return processed_attention

# %% ../../../nbs/tts.models.tacotron2.ipynb 13
class LocationSensitiveAttention(nn.Module):
    def __init__(self, attention_rnn_dim:int, embedding_dim:int, attention_dim:int,
                 attention_location_n_filters:int, attention_location_kernel_size:int):
        """Location sensitive attention

        Args:
            attention_rnn_dim (int): _description_
            embedding_dim (int): _description_
            attention_dim (int): _description_
            attention_location_n_filters (int): _description_
            attention_location_kernel_size (int): _description_
        """
        super().__init__()
        self.query_layer = LinearNorm(attention_rnn_dim, attention_dim,
                                      bias=False, w_init_gain='tanh')
        self.memory_layer = LinearNorm(embedding_dim, attention_dim, bias=False,
                                       w_init_gain='tanh')
        self.v = LinearNorm(attention_dim, 1, bias=False)
        self.location_layer = LocationLayer(attention_location_n_filters,
                                            attention_location_kernel_size,
                                            attention_dim)
        self.score_mask_value = -float("inf")

    def get_alignment_energies(self, query, processed_memory,
                               attention_weights_cat):
        """
        Args:
            query: decoder output (batch, n_mel_channels * n_frames_per_step)
            processed_memory: processed encoder outputs (B, T_in, attention_dim)
            attention_weights_cat: cumulative and prev. att weights (B, 2, max_time)

        Returns:
            alignment (batch, max_time)
        """

        processed_query = self.query_layer(query.unsqueeze(1))
        processed_attention_weights = self.location_layer(attention_weights_cat)
        energies = self.v(torch.tanh(
            processed_query + processed_attention_weights + processed_memory))

        energies = energies.squeeze(-1)
        return energies

    def forward(self, attention_hidden_state, memory, processed_memory,
                attention_weights_cat, mask):
        """
        Args:
            attention_hidden_state: attention rnn last output
            memory: encoder outputs
            processed_memory: processed encoder outputs
            attention_weights_cat: previous and cummulative attention weights
            mask: binary mask for padded data
        """
        alignment = self.get_alignment_energies(
            attention_hidden_state, processed_memory, attention_weights_cat)

        if mask is not None:
            alignment.detach().masked_fill_(mask, self.score_mask_value)

        attention_weights = F.softmax(alignment, dim=1)
        attention_context = torch.bmm(attention_weights.unsqueeze(1), memory)
        attention_context = attention_context.squeeze(1)

        return attention_context, attention_weights


# %% ../../../nbs/tts.models.tacotron2.ipynb 16
class Encoder(nn.Module):
    def __init__(self,
        encoder_embedding_dim:int=512,
        encoder_kernel_size:int=5,
        encoder_n_convolutions:int=3,
        _target_=None
        ):
        """Encoder
            - Three 1-d convolution banks
            - Bidirectional LSTM

        Args:
            encoder_embedding_dim (int, optional): _description_. Defaults to 512.
            encoder_kernel_size (int, optional): _description_. Defaults to 5.
            encoder_n_convolutions (int, optional): _description_. Defaults to 3.
        """
        super(Encoder, self).__init__()

        convolutions = []
        for _ in range(encoder_n_convolutions):
            conv_layer = nn.Sequential(
                ConvNorm(encoder_embedding_dim,
                         encoder_embedding_dim,
                         kernel_size=encoder_kernel_size, stride=1,
                         padding=int((encoder_kernel_size - 1) / 2),
                         dilation=1, w_init_gain='relu'),
                        BatchNorm1d(encoder_embedding_dim))
            convolutions.append(conv_layer)
        self.convolutions = nn.ModuleList(convolutions)

        self.lstm = LSTM(encoder_embedding_dim,
                            int(encoder_embedding_dim / 2), 1,
                            batch_first=True, bidirectional=True)

    def forward(self, x, input_lengths):
        """Compute encodings

        Args:
            x (_type_): text embeddings [B x D_embed x N_chars]
            input_lengths (_type_): text lengths / N_chars [B]

        Returns:
            _type_: encodings
        """

        for conv in self.convolutions:
            x = F.dropout(F.relu(conv(x)), 0.5, self.training)

        x = x.transpose(1, 2)

        # pytorch tensor are not reversible, hence the conversion
        input_lengths = input_lengths.cpu().numpy()
        x = nn.utils.rnn.pack_padded_sequence(x, input_lengths, batch_first=True)
        

        self.lstm.flatten_parameters()
        outputs, _ = self.lstm(x)
        # B x T x D
        outputs, _ = nn.utils.rnn.pad_packed_sequence(outputs, batch_first=True)

        return outputs

    def inference(self, x):
        for conv in self.convolutions:
            x = F.dropout(F.relu(conv(x)), 0.5, self.training)
        x = x.transpose(1, 2)
        self.lstm.flatten_parameters()
        outputs, _ = self.lstm(x)
        return outputs


# %% ../../../nbs/tts.models.tacotron2.ipynb 19
class Prenet(nn.Module):
    def __init__(self,
        in_dim=80*1,
        sizes=[256, 256],
        _target_=None
        ):
        """Prenet
            
        Args:
            in_dim (_type_): n_mel_channels * n_frames_per_step
            sizes (_type_): [prenet_dim, prenet_dim]
        """
        super(Prenet, self).__init__()
        in_sizes = [in_dim] + sizes[:-1]
        print(in_sizes)
        self.layers = nn.ModuleList(
            [LinearNorm(in_size, out_size, bias=False)
             for (in_size, out_size) in zip(in_sizes, sizes)])

    def forward(self, x):
        for linear in self.layers:
            x = F.dropout(F.relu(linear(x)), p=0.5, training=True)
        return x

# %% ../../../nbs/tts.models.tacotron2.ipynb 22
def get_mask_from_lengths(lengths):
    max_len = torch.max(lengths).item()
    # TODO(slg): check perf gain if out=torch.cuda.LongTensor(max_len)
    ids = torch.arange(0, max_len, out=torch.LongTensor(max_len))
    # from IPython import embed; embed()
    mask = (ids < lengths.unsqueeze(1)).bool()
    return mask

class Decoder(nn.Module):
    def __init__(self,
        n_mel_channels:int=80,
        n_frames_per_step:int=1,
        encoder_embedding_dim:int=512,
        attention_rnn_dim:int=1024,
        decoder_rnn_dim:int=1024,
        prenet_dim:int=256,
        max_decoder_steps:int=1000,
        gate_threshold:float=0.5,
        p_attention_dropout:float=0.5,
        p_decoder_dropout:float=0.5,
        attention_dim:int=128,
        attention_location_n_filters:int=32,
        attention_location_kernel_size:int=31,
        _target_=None
        ):
        """Decoder

        Args:
            n_mel_channels (int, optional): _description_. Defaults to 80.
            n_frames_per_step (int, optional): _description_. Defaults to 1.
            encoder_embedding_dim (int, optional): _description_. Defaults to 512.
            attention_rnn_dim (int, optional): _description_. Defaults to 1024.
            decoder_rnn_dim (int, optional): _description_. Defaults to 1024.
            prenet_dim (int, optional): _description_. Defaults to 256.
            max_decoder_steps (int, optional): _description_. Defaults to 1000.
            gate_threshold (float, optional): _description_. Defaults to 0.5.
            p_attention_dropout (float, optional): _description_. Defaults to 0.5.
            p_decoder_dropout (float, optional): _description_. Defaults to 0.5.
            attention_dim (int, optional): _description_. Defaults to 128.
            attention_location_n_filters (int, optional): _description_. Defaults to 32.
            attention_location_kernel_size (int, optional): _description_. Defaults to 31.
        """
        
        super(Decoder, self).__init__()
        self.n_mel_channels = n_mel_channels
        self.n_frames_per_step = n_frames_per_step
        self.encoder_embedding_dim = encoder_embedding_dim
        self.attention_rnn_dim = attention_rnn_dim
        self.decoder_rnn_dim = decoder_rnn_dim
        self.prenet_dim = prenet_dim
        self.max_decoder_steps = max_decoder_steps
        self.gate_threshold = gate_threshold
        self.p_attention_dropout = p_attention_dropout
        self.p_decoder_dropout = p_decoder_dropout

        self.prenet = Prenet(
            n_mel_channels * n_frames_per_step,
            [prenet_dim, prenet_dim])

        self.attention_rnn = nn.LSTMCell(
            prenet_dim + encoder_embedding_dim,
            attention_rnn_dim)

        self.attention_layer = LocationSensitiveAttention(
            attention_rnn_dim, encoder_embedding_dim,
            attention_dim, attention_location_n_filters,
            attention_location_kernel_size)

        self.decoder_rnn = nn.LSTMCell(
            attention_rnn_dim + encoder_embedding_dim,
            decoder_rnn_dim, 1)

        self.linear_projection = LinearNorm(
            decoder_rnn_dim + encoder_embedding_dim,
            n_mel_channels * n_frames_per_step)

        self.gate_layer = LinearNorm(
            decoder_rnn_dim + encoder_embedding_dim, 1,
            bias=True, w_init_gain='sigmoid')

    def get_go_frame(self, memory):
        """Gets all zeros frames to use as first decoder input

        Args:
            memory: decoder outputs

        Returns:
            decoder_input: all zeros frames
        """
        B = memory.size(0)
        decoder_input = torch.autograd.Variable(memory.data.new(
            B, self.n_mel_channels * self.n_frames_per_step).zero_())
        return decoder_input

    def initialize_decoder_states(self, memory, mask):
        """Initializes attention rnn states, decoder rnn states, attention
        weights, attention cumulative weights, attention context, stores memory
        and stores processed memory

        Args:
            memory: Encoder outputs
            mask: Mask for padded data if training, expects None for inference
        """
        B = memory.size(0)
        MAX_TIME = memory.size(1)

        self.attention_hidden = torch.autograd.Variable(memory.data.new(
            B, self.attention_rnn_dim).zero_())
        self.attention_cell = torch.autograd.Variable(memory.data.new(
            B, self.attention_rnn_dim).zero_())

        self.decoder_hidden = torch.autograd.Variable(memory.data.new(
            B, self.decoder_rnn_dim).zero_())
        self.decoder_cell = torch.autograd.Variable(memory.data.new(
            B, self.decoder_rnn_dim).zero_())

        self.attention_weights = torch.autograd.Variable(memory.data.new(
            B, MAX_TIME).zero_())
        self.attention_weights_cum = torch.autograd.Variable(memory.data.new(
            B, MAX_TIME).zero_())
        self.attention_context = torch.autograd.Variable(memory.data.new(
            B, self.encoder_embedding_dim).zero_())

        self.memory = memory
        self.processed_memory = self.attention_layer.memory_layer(memory)
        self.mask = mask

    def parse_decoder_inputs(self, decoder_inputs):
        """Prepares decoder inputs, i.e. mel outputs

        Args:
            decoder_inputs: inputs used for teacher-forced training, i.e. mel-specs

        Returns:
            inputs: processed decoder inputs
        """
        # (B, n_mel_channels, T_out) -> (B, T_out, n_mel_channels)
        decoder_inputs = decoder_inputs.transpose(1, 2)
        decoder_inputs = decoder_inputs.view(
            decoder_inputs.size(0),
            int(decoder_inputs.size(1)/self.n_frames_per_step), -1)
        # (B, T_out, n_mel_channels) -> (T_out, B, n_mel_channels)
        decoder_inputs = decoder_inputs.transpose(0, 1)
        return decoder_inputs

    def parse_decoder_outputs(self, mel_outputs, gate_outputs, alignments):
        """Prepares decoder outputs for output

        Args:
            mel_outputs:
            gate_outputs: gate output energies
            alignments:

        Returns:
            mel_outputs:
            gate_outpust: gate output energies
            alignments:
        """
        # (T_out, B) -> (B, T_out)
        alignments = torch.stack(alignments).transpose(0, 1)
        # (T_out, B) -> (B, T_out)
        gate_outputs = torch.stack(gate_outputs).transpose(0, 1)
        gate_outputs = gate_outputs.contiguous()
        # (T_out, B, n_mel_channels) -> (B, T_out, n_mel_channels)
        mel_outputs = torch.stack(mel_outputs).transpose(0, 1).contiguous()
        # decouple frames per step
        mel_outputs = mel_outputs.view(
            mel_outputs.size(0), -1, self.n_mel_channels)
        # (B, T_out, n_mel_channels) -> (B, n_mel_channels, T_out)
        mel_outputs = mel_outputs.transpose(1, 2)

        return mel_outputs, gate_outputs, alignments

    def decode(self, decoder_input):
        """Decoder step using stored states, attention and memory

        Args:
            decoder_input: previous mel output

        Returns:
            mel_output:
            gate_output: gate output energies
            attention_weights:
        """
        cell_input = torch.cat((decoder_input, self.attention_context), -1)
        self.attention_hidden, self.attention_cell = self.attention_rnn(
            cell_input, (self.attention_hidden, self.attention_cell))
        self.attention_hidden = F.dropout(
            self.attention_hidden, self.p_attention_dropout, self.training)

        attention_weights_cat = torch.cat(
            (self.attention_weights.unsqueeze(1),
             self.attention_weights_cum.unsqueeze(1)), dim=1)
        self.attention_context, self.attention_weights = self.attention_layer(
            self.attention_hidden, self.memory, self.processed_memory,
            attention_weights_cat, self.mask)

        self.attention_weights_cum += self.attention_weights
        decoder_input = torch.cat(
            (self.attention_hidden, self.attention_context), -1)
        self.decoder_hidden, self.decoder_cell = self.decoder_rnn(
            decoder_input, (self.decoder_hidden, self.decoder_cell))
        self.decoder_hidden = F.dropout(
            self.decoder_hidden, self.p_decoder_dropout, self.training)

        decoder_hidden_attention_context = torch.cat(
            (self.decoder_hidden, self.attention_context), dim=1)
        decoder_output = self.linear_projection(
            decoder_hidden_attention_context)

        gate_prediction = self.gate_layer(decoder_hidden_attention_context)
        return decoder_output, gate_prediction, self.attention_weights

    def forward(self, memory, decoder_inputs, memory_lengths):
        """Decoder forward pass for training

        Args:
            memory: Encoder outputs
            decoder_inputs: Decoder inputs for teacher forcing. i.e. mel-specs
            memory_lengths: Encoder output lengths for attention masking.

        Returns:
            mel_outputs: mel outputs from the decoder
            gate_outputs: gate outputs from the decoder
            alignments: sequence of attention weights from the decoder
        """

        decoder_input = self.get_go_frame(memory).unsqueeze(0)
        decoder_inputs = self.parse_decoder_inputs(decoder_inputs)
        decoder_inputs = torch.cat((decoder_input, decoder_inputs), dim=0)
        decoder_inputs = self.prenet(decoder_inputs)

        self.initialize_decoder_states(
            memory, mask=~get_mask_from_lengths(memory_lengths))

        mel_outputs, gate_outputs, alignments = [], [], []
        while len(mel_outputs) < decoder_inputs.size(0) - 1:
            decoder_input = decoder_inputs[len(mel_outputs)]
            mel_output, gate_output, attention_weights = self.decode(
                decoder_input)
            mel_outputs += [mel_output.squeeze(1)]
            gate_outputs += [gate_output.squeeze(1)]
            alignments += [attention_weights]

        mel_outputs, gate_outputs, alignments = self.parse_decoder_outputs(
            mel_outputs, gate_outputs, alignments)

        return mel_outputs, gate_outputs, alignments

    def inference(self, memory):
        """Decoder inference
        
        Args:
            memory: Encoder outputs

        Returns:
            mel_outputs: mel outputs from the decoder
            gate_outputs: gate outputs from the decoder
            alignments: sequence of attention weights from the decoder
        """
        decoder_input = self.get_go_frame(memory)

        self.initialize_decoder_states(memory, mask=None)

        mel_outputs, gate_outputs, alignments = [], [], []
        while True:
            decoder_input = self.prenet(decoder_input)
            mel_output, gate_output, alignment = self.decode(decoder_input)

            mel_outputs += [mel_output.squeeze(1)]
            gate_outputs += [gate_output]
            alignments += [alignment]

            if torch.sigmoid(gate_output.data) > self.gate_threshold:
                break
            elif len(mel_outputs) == self.max_decoder_steps:
                print("Warning! Reached max decoder steps")
                break

            decoder_input = mel_output

        mel_outputs, gate_outputs, alignments = self.parse_decoder_outputs(
            mel_outputs, gate_outputs, alignments)

        return mel_outputs, gate_outputs, alignments

# %% ../../../nbs/tts.models.tacotron2.ipynb 25
class Postnet(nn.Module):
    def __init__(self,
        n_mel_channels:int=80,
        postnet_embedding_dim:int=512,
        postnet_kernel_size:int=5,
        postnet_n_convolutions:int=5,
        _target_=None
    ):
        """Postnet
            Five 1-d convolution with 512 channels and kernel size 5

        Args:
            n_mel_channels (int, optional): _description_. Defaults to 80.
            postnet_embedding_dim (int, optional): _description_. Defaults to 512.
            postnet_kernel_size (int, optional): _description_. Defaults to 5.
            postnet_n_convolutions (int, optional): _description_. Defaults to 5.
        """

        super(Postnet, self).__init__()
        self.convolutions = nn.ModuleList()

        self.convolutions.append(
            nn.Sequential(
                ConvNorm(n_mel_channels, postnet_embedding_dim,
                         kernel_size=postnet_kernel_size, stride=1,
                         padding=int((postnet_kernel_size - 1) / 2),
                         dilation=1, w_init_gain='tanh'),
                nn.BatchNorm1d(postnet_embedding_dim))
        )

        for i in range(1, postnet_n_convolutions - 1):
            self.convolutions.append(
                nn.Sequential(
                    ConvNorm(postnet_embedding_dim,
                             postnet_embedding_dim,
                             kernel_size=postnet_kernel_size, stride=1,
                             padding=int((postnet_kernel_size - 1) / 2),
                             dilation=1, w_init_gain='tanh'),
                    nn.BatchNorm1d(postnet_embedding_dim))
            )

        self.convolutions.append(
            nn.Sequential(
                ConvNorm(postnet_embedding_dim, n_mel_channels,
                         kernel_size=postnet_kernel_size, stride=1,
                         padding=int((postnet_kernel_size - 1) / 2),
                         dilation=1, w_init_gain='linear'),
                nn.BatchNorm1d(n_mel_channels))
            )

    def forward(self, x):
        for i in range(len(self.convolutions) - 1):
            x = F.dropout(torch.tanh(self.convolutions[i](x)), 0.5, self.training)
        x = F.dropout(self.convolutions[-1](x), 0.5, self.training)

        return x


# %% ../../../nbs/tts.models.tacotron2.ipynb 28
class Tacotron2(nn.Module):
    def __init__(self, hparams, _target_=None):
        super().__init__()
        self.hparams = hparams
        self.mask_padding = hparams.mask_padding
        self.n_mel_channels = hparams.decoder.n_mel_channels
        self.n_frames_per_step = 1
        self.embedding = nn.Embedding(hparams.token_embedder.n_symbols, hparams.token_embedder.symbols_embedding_dim)
        std = sqrt(2.0 / (hparams.token_embedder.n_symbols + hparams.token_embedder.symbols_embedding_dim))
        val = sqrt(3.0) * std  # uniform bounds for std
        self.embedding.weight.data.uniform_(-val, val)
        
        self.encoder = Encoder(**hparams.encoder)
        self.decoder = Decoder(**hparams.decoder)
        self.postnet = Postnet(**hparams.postnet)
        if hparams.get('speaker_embedder'):
            # self.speaker_embedding = LinearNorm(hparams.speaker_embedder.embedding_dim, hparams.encoder.encoder_embedding_dim)
            print("train with pre-trained speaker embedder")

    def parse_batch(self, batch):
        if self.hparams.get('speaker_embedder'):
            text_padded, input_lengths, mel_padded, gate_padded, output_lengths, speaker_ids, spker_embed = batch
            text_padded = to_gpu(text_padded).long()
            input_lengths = to_gpu(input_lengths).long()
            max_len = torch.max(input_lengths.detach()).item()
            mel_padded = to_gpu(mel_padded).float()
            gate_padded = to_gpu(gate_padded).float()
            output_lengths = to_gpu(output_lengths).long()
            speaker_ids = speaker_ids
            spker_embed = to_gpu(spker_embed).float()
            return (
                (text_padded, input_lengths, mel_padded, max_len, output_lengths, spker_embed),
                (mel_padded, gate_padded))
        else:
            text_padded, input_lengths, mel_padded, gate_padded, output_lengths = batch
            text_padded = to_gpu(text_padded).long()
            input_lengths = to_gpu(input_lengths).long()
            max_len = torch.max(input_lengths.detach()).item()
            mel_padded = to_gpu(mel_padded).float()
            gate_padded = to_gpu(gate_padded).float()
            output_lengths = to_gpu(output_lengths).long()
            return (
                (text_padded, input_lengths, mel_padded, max_len, output_lengths),
                (mel_padded, gate_padded))

    def parse_output(self, outputs, output_lengths=None):
        if self.mask_padding and output_lengths is not None:
            mask = ~get_mask_from_lengths(output_lengths)
            mask = mask.expand(self.n_mel_channels, mask.size(0), mask.size(1))
            mask = mask.permute(1, 0, 2)

            outputs[0].detach().masked_fill_(mask, 0.0)
            outputs[1].detach().masked_fill_(mask, 0.0)
            outputs[2].detach().masked_fill_(mask[:, 0, :], 1e3)  # gate energies

        return outputs

    def forward(self, inputs):
        if self.hparams.get('speaker_embedder'):
            text_inputs, text_lengths, mels, max_len, output_lengths, spker_embed = inputs
        else:
            text_inputs, text_lengths, mels, max_len, output_lengths = inputs
        text_lengths, output_lengths = text_lengths.detach(), output_lengths.detach()

        embedded_inputs = self.embedding(text_inputs).transpose(1, 2) # B x D_char_embed x T_seq
        encoder_outputs = self.encoder(embedded_inputs, text_lengths) # B x T_seq x D_enc_embed
        if self.hparams.get('speaker_embedder'):
            # copy of speaker embedder at each char/time step
            spker_embed = spker_embed.unsqueeze(1) # B x 1 x D_emb
            embedded_speakers = spker_embed.repeat(1, encoder_outputs.size(1), 1) # B x T_seq x D_emb
            encoder_outputs = torch.cat((encoder_outputs, embedded_speakers), dim=2) # B x T_seq x (D_emb + D_enc)
            # encoder_outputs = encoder_outputs + self.speaker_embedding(spker_embed).unsqueeze(1).expand(-1, max_len, -1)

        mel_outputs, gate_outputs, alignments = self.decoder(encoder_outputs, mels, memory_lengths=text_lengths)
        mel_outputs_postnet = self.postnet(mel_outputs)
        mel_outputs_postnet = mel_outputs + mel_outputs_postnet

        return self.parse_output(
            [mel_outputs, mel_outputs_postnet, gate_outputs, alignments],
            output_lengths)

    def inference(self, inputs):
        """ generates spectrogram from text

        Args:
            inputs (_type_): _description_

        Returns:
            _type_: _description_
        """
        if self.hparams.get('speaker_embedder'):
            text, spker_embed = inputs
        else:
            text = inputs
        with torch.no_grad():
            embedded_inputs = self.embedding(text).transpose(1, 2) # char embeddings
            encoder_outputs = self.encoder.inference(embedded_inputs) # encoded chars hidden states
            if self.hparams.get('speaker_embedder'):
                embedded_speakers = spker_embed.repeat(1, encoder_outputs.size(1), 1)
                encoder_outputs = torch.cat((encoder_outputs, embedded_speakers), dim=2)
            mel_outputs, gate_outputs, alignments = self.decoder.inference(
                encoder_outputs)

            mel_outputs_postnet = self.postnet(mel_outputs)
            mel_outputs_postnet = mel_outputs + mel_outputs_postnet

            outputs = self.parse_output(
                [mel_outputs, mel_outputs_postnet, gate_outputs, alignments])
        return outputs
    
    def load_from_checkpoint(self, checkpoint_path, device=torch.device('cpu')):
        ckpt_dict = torch.load(checkpoint_path, map_location=device)
        state_dict = ckpt_dict['state_dict']
        if checkpoint_from_distributed(state_dict):
            print("checkpoint from distributed model")
            state_dict = unwrap_distributed(state_dict)
        self.load_state_dict(state_dict)
        return self

    def setup_inference(self, checkpoint_path, fp16=False, device=torch.device('cpu')):
        """prepare model for inference

        Args:
            checkpoint_path (_type_): _description_
            fp16_run (bool, optional): _description_. Defaults to False.
            device (_type_, optional): _description_. Defaults to torch.device('cpu').
        """
        model = self.load_from_checkpoint(checkpoint_path, device)
        if fp16:
            print("mixed-training")
            _ = model.half()
        _ = model.to(device).eval()
        return(model)
